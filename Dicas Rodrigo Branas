Regras de Criação de Variáveis em JavaScript
	
	- Devem começar por uma Letra, $(normalmente em caso de Frameworks AngularJs , JQuery) ou _(Normalmente em casos de membros privados)
	- Após a primeira letra, podem conter números
	- Por convenção, começa com letra minúscula e usa camelCase
	- São case-sensitive(mesmo o HTML sendo case-insensitive)

	Ex. de Declaração de Variáveis
		
		var name = "AgileCode"; ou 'AgileCode';
		var top10 = [1,2,3,4,5,6,7,8,9,10]
		var $scope = {title:'JavaScript', version:'6'};
		var _person = "John";
		var numberCode = 897987987;
		var a=10, b=9, c=8;
		var language;

	Tipos de Dados (Number, String, Boolean)

	Number

		Só existe um tipo numérico na linguagem e ele tem as seguintes características:

			- IEEE-754(Standard for Floating-Point)
			- Binary64 ou Double Precision
			- Cuidado com as Exceções
				0.1+0.2 = Resíduo decorrente da operação binária com frações

		Ex.
			-01-trabalhando-com-numeros.js

	String

		Uma String é composta por uma sequência de 0 ou mais caracteres com as seguintes características:
			- São Imutáveis
			- Podem ser declaradas com aspas simples(' ') ou duplas(" ")

		Ex.
			-02-trabalhando-com-strings.js


	Boolean

		A linguagem JS assume o estado de determinados tipos como true ou false, dependendo do caso.

		Ex.
			-03-trabalhando-com-boolean.js

	Null e Undefined

		O tipo undefined é retornado caso uma propriedade de um determinado objeto seja consultada e não exista
		O tipo null indica a ausência de valor em uma determinada propriedade já existente

		Ex.
			-04-trabalhando-com-null-e-undefined.js

	Object

		Um objeto em Javascript é uma coleção dinâmica de chaves e valores de qualquer tipo de dado.
		É possível adicionar ou remover prorpriedades a qualquer momento

		Ex.
			-05-trabalhando-com-objetos.js

	Function

		A linguagem JS não tem 
			- Classe
			- Construtor
			- Método
			- Módulo
		
		As funções são responsáveis pelo poder da linguagem JavaScript
			Uma função é um objeto que contém um bloco de código executável.
			Esse bloco é isolado, não sendo possível acessá-lo externamente.
			Na linguagem as funções são de primeira classe ou seja, podem ser atribuidas
			a uma variável, passada como parâmetro ou ser retornada de uma outra função.

		Ex.
			-01-trabalhando-com-funcoes.js
			-02-trabalhando-com-funcoes.js

		

	Arrays

		Não existem Arrays na Linguagem JS.
		Os Arrays são apenas objetos especiais que oferecem meios para acessar e manipular suas propriedades por mio de índices.
		Não se esquecer que o Array não tem tamanho fixo e o tamanho inicial é apenas uma forma de inicializá-lo


	Expressões Regulares

		Expressões Regulares são estruturas formadas por uma sequência de caracteres que especificam um padrão formal.
			Usada para realizar a validação de campos
			Usada para realizar a Extração de Dados
			Usada para realizar a substituição de caracteres em textos

	Trabalhando com Datas
		Apesar de parecer simples a data é representada pela quantidade de milissegundos desde o início da Era Unix,
		tendo inicio em 1 de janeiro de 1970 00:00:00 a partir do UTC(Tempo Universal Coordenado)
		Ex. trabalhando-com-datas.js

	Operadores
		Cuidado com os operadores de comparação == e !=
		O comportamento destes operadores pode produzir resultados inesperados por conta
		da coersão de tipos


	Estruturas
		for, if, else, continue, while, switch, break, throw, try e catch

	Herança
		Parte 1
			Um objeto é uma coleção dinâmica de chaves e valores, que podem 
		ser de qualquer tipo, e um protótipo que pode ser um objeto ou null






		Implementando os Design Patterns utilizando JavaScript (Implementar ao Final do RB)
			https://addyosmani.com/resources/essentialjsdesignpatterns/book/index.html










